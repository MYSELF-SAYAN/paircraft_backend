model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  isVerified   Boolean       @default(false)  // Email verification status
  verificationToken String?  // Token for email verification
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  refreshToken String?       // Optional: Used for authentication
  rooms        Room[]        // One-to-Many: A user can create multiple rooms
  memberships  Room_member[] // One-to-Many: A user can join multiple rooms
  messages     Message[]     // One-to-Many: A user can send multiple messages
  joinRequests JoinRequest[] // One-to-Many: A user can request to join multiple rooms
}

model Room {
  id           String        @id @default(uuid())
  creator      User          @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id   String
  name         String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  members      Room_member[] // One-to-Many: A room can have multiple members
  messages     Message[]     // One-to-Many: A room can have multiple messages
  codeSnapshot CodeSnapshot? // One-to-One: A room has a single code snapshot
  requests     JoinRequest[] // One-to-Many: A room can have multiple join requests
}

enum RoomRole {
  OWNER
  EDITOR
  VIEWER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Room_member {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  room      Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id   String
  role      RoomRole @default(VIEWER) // Default role is Viewer
  joined_at DateTime @default(now())
}

model JoinRequest {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  room      Room          @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id   String
  status    RequestStatus @default(PENDING)
  created_at DateTime     @default(now())
}

model Message {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  room      Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id   String
  content   String
  created_at DateTime @default(now())
}

model CodeSnapshot {
  id        String   @id @default(uuid())
  room      Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id   String   @unique
  code      String   // The current state of the code
  updated_at DateTime @default(now())
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
